#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
struct node
{
    int data;
    struct node *next;
}
*head=NULL,*p,*t,*newnode;

void display()
{
    if(head==NULL)
    {
        printf("the linked list is empty");
    }
    else
    {
        for(p=head;p!=NULL;p=p->next)
        printf("%d->",p->data);
    }
}
void create()
{
    int i,n,ele;
    printf("eneter the list count:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("enter the elemnts:");
        scanf("%d",&ele);
        newnode=(struct node*)malloc(sizeof(struct node));
        newnode->data=ele;
        newnode->next=NULL;
        if(head==NULL)
        {
            head=newnode;
            p=newnode;
        }
        else
        {
            for(p=head;p->next!=NULL;p=p->next);
            p->next=newnode;
            p=newnode;
        }
    }
}
void insert_at_begin()
{
    int ele;
    printf("enter the elemnts:");
    scanf("%d",&ele);
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=ele;
    p=head;
    newnode->next=p;
    head=newnode;
    p=newnode;
}
void insert_at_end()
{
       int ele;
    printf("enter the elemnts:");
    scanf("%d",&ele);
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=ele;
    newnode->next=NULL;
    for(p=head;p->next!=NULL;p=p->next);
    p->next=newnode;
    p=newnode;
}
void insert_at_any_position()
{
    int i,ele,pos;
    printf("enter the element and postion:");
    scanf("%d \n %d",&ele,&pos);
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=ele;
    for(i=1,p=head;i<pos;i++,p=p->next)
    t=p;
    t->next=newnode;
    newnode->next=p;
    p=newnode;
}
void delete_at_begin()
{
    int ele;
    p=head;
    ele=p->data;
    head=p->next;
    free(p);
    printf("the deleted element is:%d",ele);
    
}
void delete_at_end()
{
    int ele;
    for(p=head;p->next!=NULL;p=p->next)
    t=p;
    ele=p->data;
    t->next=NULL;
    free(p);
    p=t;
    printf("the deleted element is:%d",ele);
}
void delete_at_any_pos()
{
    int ele,i,pos;
    printf("enter the position to be deletd:");
    scanf("%d",&pos);
    for(p=head,i=1;i<pos;i++,p=p->next)
    t=p;
    ele=p->data;
    t->next=p->next;
    p=t;
    printf("the deleted element is:%d",ele);
}
void even_odd_count()
{
    int odd_count=0,even_count=0;
    for(p=head;p!=NULL;p=p->next)
    {
            if(p->data%2==1)
            odd_count++;
            
            else
            even_count++;
        
    }
        printf("\nthe odd numbers is:%d",odd_count);
        printf("\nthe even number is :%d",even_count);
}
void sum_sll()
{
    int sum=0;
    for(p=head;p->next!=NULL;p=p->next)
    {
        sum=sum+p->data;
    }
    printf("the sum is:%d",sum);
}

void odd_print()
{
    int i;
    for(p=head;p->next!=NULL;i++,p=p->next)
    {
        if(i%2==1)
        printf("%d\t",p->data);
    }
    
}
void search_key()
{
    int key,i,pos,flag=0;
    printf("enter the key:");
    scanf("%d",&key);
    for(i=1,p=head;p!=NULL;p=p->next,i++)
    {
        if(p->data==key)
        {
            flag=1;
            pos=i;
            break;
        }
    }
    if(flag==1)
    printf("the key is present in the list");
    else
    printf("the key element is not found at list");
}

int main()
{
     int choice;
    do{
   
    printf("\n*MAIN MENU*");
    printf("\n 1. create");
    printf("\n 2. display");
    printf("\n 3. insertion at begin");
    printf("\n 4. insert at end");
    printf("\n 5. insert at any position");
    printf("\n 6. delete at begin");
    printf("\n 7.delete at end");
    printf("\n 8. delete at any position");
    printf("\n 9 .even odd count in linked list");
    printf("\n 10.sum of linked list");
    printf("\n 11.odd print");
    printf("\n 12. search key element");
    printf("\n 13. exit");
    printf("\n enter your choice:");
    scanf("%d",&choice);
    switch(choice)
    {
        case 1:create();
        break;
        case 2:display();
        break;
        case 3:insert_at_begin();
        break;
        case 4:insert_at_end();
        break;
        case 5:insert_at_any_position();
        break;
        case 6:delete_at_begin();
        break;
        case 7:delete_at_end();
        break;
        case 8:delete_at_any_pos();
        break;
        case 9:even_odd_count();
        break;
        case 10:sum_sll();
        break;
        case 11:odd_print();
        break;
        case 12:search_key();
        break;
        case 13:exit(0);
        break;
    }
}
  while(choice>=1 && choice<=13);
}
